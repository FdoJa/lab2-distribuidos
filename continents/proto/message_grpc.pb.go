// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: message.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Continents_InformePersona_FullMethodName = "/grpc.Continents/InformePersona"
)

// ContinentsClient is the client API for Continents service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContinentsClient interface {
	InformePersona(ctx context.Context, in *Informe, opts ...grpc.CallOption) (*RespuestaVacia, error)
}

type continentsClient struct {
	cc grpc.ClientConnInterface
}

func NewContinentsClient(cc grpc.ClientConnInterface) ContinentsClient {
	return &continentsClient{cc}
}

func (c *continentsClient) InformePersona(ctx context.Context, in *Informe, opts ...grpc.CallOption) (*RespuestaVacia, error) {
	out := new(RespuestaVacia)
	err := c.cc.Invoke(ctx, Continents_InformePersona_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContinentsServer is the server API for Continents service.
// All implementations must embed UnimplementedContinentsServer
// for forward compatibility
type ContinentsServer interface {
	InformePersona(context.Context, *Informe) (*RespuestaVacia, error)
	mustEmbedUnimplementedContinentsServer()
}

// UnimplementedContinentsServer must be embedded to have forward compatible implementations.
type UnimplementedContinentsServer struct {
}

func (UnimplementedContinentsServer) InformePersona(context.Context, *Informe) (*RespuestaVacia, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InformePersona not implemented")
}
func (UnimplementedContinentsServer) mustEmbedUnimplementedContinentsServer() {}

// UnsafeContinentsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContinentsServer will
// result in compilation errors.
type UnsafeContinentsServer interface {
	mustEmbedUnimplementedContinentsServer()
}

func RegisterContinentsServer(s grpc.ServiceRegistrar, srv ContinentsServer) {
	s.RegisterService(&Continents_ServiceDesc, srv)
}

func _Continents_InformePersona_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Informe)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContinentsServer).InformePersona(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Continents_InformePersona_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContinentsServer).InformePersona(ctx, req.(*Informe))
	}
	return interceptor(ctx, in, info, handler)
}

// Continents_ServiceDesc is the grpc.ServiceDesc for Continents service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Continents_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Continents",
	HandlerType: (*ContinentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InformePersona",
			Handler:    _Continents_InformePersona_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}
